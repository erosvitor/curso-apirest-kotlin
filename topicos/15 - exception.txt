====================================================================================================
CURSO API REST KTOR - EXCEPTION
====================================================================================================


Exception
----------------------------------------------------------------------------------------------------
- Criar o pacote 'com.ctseducare.expensebook.exception'


- Criar o arquivo 'ResourceNotFoundExecption.kt'

class ResourceNotFoundException(override val message: String) : Throwable()


Update
----------------------------------------------------------------------------------------------------
- Alterar o método 'update' da classe 'ExpenseService' conforme abaixo

    ... 
    fun update(expense: Expense) : Expense {
        val expenseFounded = dao.findById(expense.id!!)
        if (expenseFounded == null) {
            throw ResourceNotFoundException("Expense do not exist!")
        } else {
            dao.update(expense)
            return expense
        }
    }
    ...


- Alterar a rota PUT conforme abaixo

        ...
        put {
            val request = call.receive<Expense>()
            try {
                val response = service.update(request)
                call.respond(HttpStatusCode.OK, response)
            } catch (e: ResourceNotFoundException) {
                call.respond(HttpStatusCode.NotFound, e.message)
            }
        }
        ...


Delete
----------------------------------------------------------------------------------------------------
- Alterar o método 'delete' da classe 'ExpenseService' conforme abaixo

    ... 
    fun delete(id: Int) : Expense {
        val expenseFounded = dao.findById(id)
        if (expenseFounded == null) {
            throw ResourceNotFoundException("Expense do not exist!")
        } else {
            dao.delete(id)
            return expenseFounded
        }
    }
    ...


- Alterar a rota DELETE conforme abaixo

    ...
    delete {
        val id = call.parameters["id"]?.toInt() ?: 0
        try {
            val response = service.delete(id)
            call.respond(HttpStatusCode.OK, response)
        } catch (e: ResourceNotFoundException) {
            call.respond(HttpStatusCode.NotFound, e.message)
        }
    }
    ...


Find by ID
----------------------------------------------------------------------------------------------------
- Alterar o método 'findById' da classe 'ExpenseService' conforme abaixo

    ... 
    fun findById(id: Int) : Expense {
        val expenseFounded = dao.findById(id)
        if (expenseFounded == null) {
            throw ResourceNotFoundException("Expense do not exist!")
        } else {
            return expenseFounded
        }
    }
    ...


- Alterar a rota GET conforme abaixo

    ...
    get {
        val id = call.parameters["id"]?.toInt() ?: 0
        try {
            val response = service.findById(id)
            call.respond(HttpStatusCode.OK, response)
        } catch (e: ResourceNotFoundException) {
            call.respond(HttpStatusCode.NotFound, e.message)
        }
    }
    ...


